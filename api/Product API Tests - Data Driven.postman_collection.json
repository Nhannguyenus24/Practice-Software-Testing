{
	"info": {
		"_postman_id": "3b997864-d105-4e08-a3c5-ea22e45a266e",
		"name": "Product API Tests - Data Driven",
		"description": "Comprehensive test collection for Product APIs with data-driven testing using CSV files",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35280441"
	},
	"item": [
		{
			"name": "GET /products - Get All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test 2: Response structure validation",
							"pm.test(\"Response has correct structure\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('data');",
							"    pm.expect(responseJson).to.have.property('current_page');",
							"    pm.expect(responseJson).to.have.property('total');",
							"    pm.expect(responseJson).to.have.property('per_page');",
							"});",
							"",
							"// Test 3: Data is an array",
							"pm.test(\"Data is an array\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.data).to.be.an('array');",
							"});",
							"",
							"// Test 4: Products have required fields",
							"pm.test(\"Products have required fields\", function () {",
							"    const responseJson = pm.response.json();",
							"    if (responseJson.data.length > 0) {",
							"        const product = responseJson.data[0];",
							"        pm.expect(product).to.have.property('id');",
							"        pm.expect(product).to.have.property('name');",
							"        pm.expect(product).to.have.property('description');",
							"        pm.expect(product).to.have.property('price');",
							"        pm.expect(product).to.have.property('is_location_offer');",
							"        pm.expect(product).to.have.property('is_rental');",
							"    }",
							"});",
							"",
							"// Test 5: Price is formatted correctly",
							"pm.test(\"Price is formatted correctly\", function () {",
							"    const responseJson = pm.response.json();",
							"    if (responseJson.data.length > 0) {",
							"        const product = responseJson.data[0];",
							"        pm.expect(product.price).to.match(/^\\d+\\.\\d{2}$/);",
							"    }",
							"});",
							"",
							"// Test 6: Response time is acceptable",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"// Test 7: Content-Type header",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"// Test 8: Brand filter validation (if by_brand is provided)",
							"if (pm.variables.get('by_brand') && pm.variables.get('by_brand') !== '') {",
							"    pm.test(\"All products belong to specified brand\", function () {",
							"        const responseJson = pm.response.json();",
							"        const brandId = parseInt(pm.variables.get('by_brand'));",
							"        if (!isNaN(brandId)) {",
							"            responseJson.data.forEach(product => {",
							"                if (product.brand) {",
							"                    pm.expect(product.brand.id).to.equal(brandId);",
							"                }",
							"            });",
							"        }",
							"    });",
							"}",
							"",
							"// Test 9: Category filter validation (if by_category is provided)",
							"if (pm.variables.get('by_category') && pm.variables.get('by_category') !== '') {",
							"    pm.test(\"All products belong to specified category\", function () {",
							"        const responseJson = pm.response.json();",
							"        const categoryId = parseInt(pm.variables.get('by_category'));",
							"        if (!isNaN(categoryId)) {",
							"            responseJson.data.forEach(product => {",
							"                if (product.category) {",
							"                    pm.expect(product.category.id).to.equal(categoryId);",
							"                }",
							"            });",
							"        }",
							"    });",
							"}",
							"",
							"// Test 10: Rental filter validation (if is_rental is provided)",
							"if (pm.variables.get('is_rental') && pm.variables.get('is_rental') !== '') {",
							"    pm.test(\"All products match rental filter\", function () {",
							"        const responseJson = pm.response.json();",
							"        const isRental = pm.variables.get('is_rental') === '1' || pm.variables.get('is_rental') === 'true';",
							"        responseJson.data.forEach(product => {",
							"            pm.expect(product.is_rental).to.equal(isRental ? 1 : 0);",
							"        });",
							"    });",
							"}",
							"",
							"// Test 11: Sort validation (if sort is provided)",
							"if (pm.variables.get('sort') && pm.variables.get('sort') !== '') {",
							"    pm.test(\"Products are sorted correctly\", function () {",
							"        const responseJson = pm.response.json();",
							"        const sortParts = pm.variables.get('sort').split(',');",
							"        if (sortParts.length === 2) {",
							"            const field = sortParts[0];",
							"            const direction = sortParts[1];",
							"            const values = responseJson.data.map(product => product[field]);",
							"            const sortedValues = [...values].sort((a, b) => {",
							"                if (direction === 'asc') {",
							"                    return a > b ? 1 : -1;",
							"                } else {",
							"                    return a < b ? 1 : -1;",
							"                }",
							"            });",
							"            pm.expect(values).to.deep.equal(sortedValues);",
							"        }",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products"
					],
					"query": [
						{
							"key": "by_brand",
							"value": "{{by_brand}}",
							"disabled": true
						},
						{
							"key": "by_category",
							"value": "{{by_category}}",
							"disabled": true
						},
						{
							"key": "is_rental",
							"value": "{{is_rental}}",
							"disabled": true
						},
						{
							"key": "between",
							"value": "{{between}}",
							"disabled": true
						},
						{
							"key": "sort",
							"value": "{{sort}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /products/search - Search Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Status code validation",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test 2: Response structure validation",
							"pm.test(\"Response has correct structure\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('data');",
							"    pm.expect(responseJson).to.have.property('current_page');",
							"    pm.expect(responseJson).to.have.property('total');",
							"    pm.expect(responseJson).to.have.property('per_page');",
							"});",
							"",
							"// Test 3: Search results validation",
							"pm.test(\"Search results contain search term\", function () {",
							"    const responseJson = pm.response.json();",
							"    const searchTerm = pm.variables.get('search_query');",
							"    if (searchTerm && searchTerm !== '') {",
							"        responseJson.data.forEach(product => {",
							"            pm.expect(product.name.toLowerCase()).to.include(searchTerm.toLowerCase());",
							"        });",
							"    }",
							"});",
							"",
							"// Test 4: Products have required fields",
							"pm.test(\"Products have required fields\", function () {",
							"    const responseJson = pm.response.json();",
							"    if (responseJson.data.length > 0) {",
							"        const product = responseJson.data[0];",
							"        pm.expect(product).to.have.property('id');",
							"        pm.expect(product).to.have.property('name');",
							"        pm.expect(product).to.have.property('description');",
							"        pm.expect(product).to.have.property('price');",
							"    }",
							"});",
							"",
							"// Test 5: Response time is acceptable",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"// Test 6: Content-Type header",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"// Test 7: Security test for SQL injection",
							"if (pm.variables.get('search_query') && pm.variables.get('search_query').includes('DROP TABLE')) {",
							"    pm.test(\"SQL injection attempt handled safely\", function () {",
							"        pm.expect(pm.response.code).to.equal(200);",
							"        const responseJson = pm.response.json();",
							"        pm.expect(responseJson).to.have.property('data');",
							"    });",
							"}",
							"",
							"// Test 8: Security test for XSS",
							"if (pm.variables.get('search_query') && pm.variables.get('search_query').includes('<script>')) {",
							"    pm.test(\"XSS attempt handled safely\", function () {",
							"        pm.expect(pm.response.code).to.equal(200);",
							"        const responseJson = pm.response.json();",
							"        pm.expect(responseJson).to.have.property('data');",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/products/search?q={{search_query}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "{{search_query}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /products/{id} - Get Product by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Status code validation",
							"pm.test(\"Status code matches expected\", function () {",
							"    const expectedStatus = parseInt(pm.variables.get('expected_status') || '200');",
							"    pm.response.to.have.status(expectedStatus);",
							"});",
							"",
							"// Test 2: Product ID validation (for valid IDs)",
							"if (pm.variables.get('expected_status') === 200) {",
							"    pm.test(\"Product has correct ID\", function () {",
							"        const responseJson = pm.response.json();",
							"        const expectedId = parseInt(pm.variables.get('product_id'));",
							"        pm.expect(responseJson.id).to.equal(expectedId);",
							"    });",
							"",
							"    // Test 3: Product has all required fields",
							"    pm.test(\"Product has all required fields\", function () {",
							"        const responseJson = pm.response.json();",
							"        pm.expect(responseJson).to.have.property('id');",
							"        pm.expect(responseJson).to.have.property('name');",
							"        pm.expect(responseJson).to.have.property('description');",
							"        pm.expect(responseJson).to.have.property('price');",
							"        pm.expect(responseJson).to.have.property('is_location_offer');",
							"        pm.expect(responseJson).to.have.property('is_rental');",
							"        pm.expect(responseJson).to.have.property('brand');",
							"        pm.expect(responseJson).to.have.property('category');",
							"        pm.expect(responseJson).to.have.property('product_image');",
							"    });",
							"",
							"    // Test 4: Related objects have correct structure",
							"    pm.test(\"Related objects have correct structure\", function () {",
							"        const responseJson = pm.response.json();",
							"        pm.expect(responseJson.brand).to.have.property('id');",
							"        pm.expect(responseJson.brand).to.have.property('name');",
							"        pm.expect(responseJson.category).to.have.property('id');",
							"        pm.expect(responseJson.category).to.have.property('name');",
							"        pm.expect(responseJson.product_image).to.have.property('id');",
							"        pm.expect(responseJson.product_image).to.have.property('file_name');",
							"    });",
							"",
							"    // Test 5: Price is formatted correctly",
							"    pm.test(\"Price is formatted correctly\", function () {",
							"        const responseJson = pm.response.json();",
							"        pm.expect(responseJson.price).to.be.a(\"number\");",
							"    });",
							"} else {",
							"    // Test 6: Error response validation (for invalid IDs)",
							"    pm.test(\"Error response has appropriate structure\", function () {",
							"        const responseJson = pm.response.json();",
							"        pm.expect(responseJson).to.have.property('message');",
							"    });",
							"}",
							"",
							"// Test 7: Response time is acceptable",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"// Test 8: Content-Type header",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"// Test 9: Input validation for non-numeric IDs",
							"if (pm.variables.get('product_id') === 'abc') {",
							"    pm.test(\"Non-numeric ID returns 404\", function () {",
							"        pm.expect(pm.response.code).to.equal(404);",
							"    });",
							"}",
							"",
							"// Test 10: Input validation for negative IDs",
							"if (pm.variables.get('product_id') === '-1') {",
							"    pm.test(\"Negative ID returns 404\", function () {",
							"        pm.expect(pm.response.code).to.equal(404);",
							"    });",
							"}",
							"",
							"// Test 11: Input validation for zero ID",
							"if (pm.variables.get('product_id') === '0') {",
							"    pm.test(\"Zero ID returns 404\", function () {",
							"        pm.expect(pm.response.code).to.equal(404);",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/products/{{product_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{product_id}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "{{baseUrl}}",
			"type": "string"
		}
	]
}
